     1                                  %include "lib64.asm"
     2                              <1>          section .text     ; ������� ����
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  section .data ; сегмент инициализированных переменных
     3 00000000 456E74657220656C65-         EntrMsg db "Enter element: ",10 ; выводимое сообщение
     3 00000009 6D656E743A200A     
     4                                      lenEntr equ $-EntrMsg  
     5 00000010 416E737765723A0A            ExitMsg db "Answer:",10 ; выводимое сообщение
     6                                      lenExit equ $-ExitMsg
     7 00000018 19000000                    len_arr dd 25 ; длина массива
     8                                  section .bss ; сегмент неинициализированных переменных
     9 00000000 <res Ah>                    InBuf   resb    10 ; буфер для вводимой строки
    10                                      lenIn   equ     $-InBuf
    11 0000000A <res Ah>                    OutBuf  resb    10 ; буфер для вводимой строки
    12 00000014 <res 32h>                   arr resw 25
    13                                  section .text 
    14                                      global _start
    15                                  _start:
    16 000000A9 41B800000000                mov r8, 0 ; инициализация счетчика элементов
    17 000000AF 8B0C25[18000000]            mov ecx, [len_arr] ; загрузка счетчика
    18                                  begin_loop_input:
    19 000000B6 51                          push rcx
    20 000000B7 48BE-                       mov rsi, EntrMsg ; адрес выводимой строки
    20 000000B9 [0000000000000000] 
    21 000000C1 BA10000000                  mov rdx, lenEntr ; длина строки
    22 000000C6 B801000000                  mov rax, 1 ; системная функция 1 (write)
    23 000000CB BF01000000                  mov rdi, 1 ; дескриптор файла stdout=1
    24 000000D0 0F05                        syscall ; вызов системной функции
    25 000000D2 48BE-                       mov rsi, InBuf ; адрес вводимой строки
    25 000000D4 [0000000000000000] 
    26 000000DC BA0A000000                  mov rdx, lenIn ; длина строки
    27 000000E1 B800000000                  mov rax, 0 ; системная функция 0 (read)
    28 000000E6 BF00000000                  mov rdi, 0 ; дескриптор файла stdin=0
    29 000000EB 0F05                        syscall ; вызов системной функции
    30 000000ED BE[00000000]                mov esi, InBuf ; адрес введенной строки
    31 000000F2 E85BFFFFFF                  call StrToInt64
    32 000000F7 83FB00                      cmp ebx, 0 ; проверка кода ошибки
    33 000000FA 75A0                        jne  StrToInt64.Error ; при преобразовании обнаружена ошибка
    34 000000FC 43898400[14000000]          mov [r8*2+arr], eax ; запись числа в память
    35 00000104 59                          pop rcx
    36 00000105 49FFC0                      inc r8 ; инкрементирование счетчика элементов
    37 00000108 E2AC                        loop begin_loop_input
    38                                      
    39 0000010A 41B800000000                mov r8, 0 ; инициализация счетчика элементов
    40 00000110 8B0C25[18000000]            mov ecx, [len_arr] ; загрузка счетчика
    41 00000117 83E901                      sub ecx, 1
    42 0000011A 66BA0100                    mov dx, 1 ; количество уникальных элементов
    43                                  begin_loop_count:
    44 0000011E 41BA00000000                mov r10, 0 ; количество повторений конкретного элемента
    45 00000124 51                          push rcx
    46 00000125 66438B8400-                 mov ax, [r8*2+arr] ; загрузка числа в регистр
    46 0000012A [14000000]         
    47 0000012E 41B900000000                mov r9, 0 ; инициализация внутреннего счетчика элементов
    48                                  begin_loop_inner:
    49 00000134 4F8D1C00                    lea r11, [r8*2]
    50 00000138 4F8D2409                    lea r12, [r9*2]
    51 0000013C 4D01E3                      add r11,r12 ; вычисление адреса
    52 0000013F 66418B9B[16000000]          mov bx, [r11+arr+2] ; загрузка числа в регистр
    53 00000147 49FFC1                      inc r9 ; инкрементирование внутреннего счетчика элементов
    54 0000014A 6639C3                      cmp bx, ax 
    55 0000014D 7402                        je count
    56 0000014F EB04                        jmp else_inner
    57                                  count:
    58 00000151 4983C201                    add r10, 1 ; подсчет количества повторений конкретного элемента
    59                                  else_inner:
    60 00000155 E2DD                        loop begin_loop_inner  
    61 00000157 59                          pop rcx
    62 00000158 49FFC0                      inc r8 ; инкрементирование счетчика элементов
    63 0000015B 4983FA00                    cmp r10, 0
    64 0000015F 7402                        je increm
    65 00000161 EB04                        jmp else_outer
    66                                  increm:
    67 00000163 6683C201                    add dx, 1 ; подсчет уникальных элементов
    68                                  else_outer:
    69 00000167 E2B5                        loop begin_loop_count
    70 00000169 66891425[14000000]          mov [arr], dx ; запись числа элементов на 0 элемент
    71                                     
    72 00000171 48BE-                       mov rsi, ExitMsg ; адрес выводимой строки
    72 00000173 [1000000000000000] 
    73 0000017B BA08000000                  mov rdx, lenExit ; длина строки
    74 00000180 B801000000                  mov rax, 1 ; системная функция 1 (write)
    75 00000185 BF01000000                  mov rdi, 1 ; дескриптор файла stdout=1
    76 0000018A 0F05                        syscall ; вызов системной функции
    77 0000018C 41B800000000                mov r8, 0 ; инициализация счетчика элементов
    78 00000192 8B0C25[18000000]            mov ecx, [len_arr] ; загрузка счетчика
    79                                  begin_loop_output:
    80 00000199 51                          push rcx
    81 0000019A BE[0A000000]                mov esi, OutBuf ; загрузка адреса буфера вывода
    82 0000019F 438B8400[14000000]          mov eax, [r8*2+arr] ; загрузка числа в регистр
    83 000001A7 98                          cwde ; развертывание числа из ax в eax
    84 000001A8 E853FEFFFF                  call IntToStr64
    85 000001AD 48BE-                       mov rsi, OutBuf ; адрес выводимой строки
    85 000001AF [0A00000000000000] 
    86 000001B7 4889C2                      mov rdx, rax ; длина строки
    87 000001BA B801000000                  mov rax, 1 ; системная функция 1 (write)
    88 000001BF BF01000000                  mov rdi, 1 ; дескриптор файла stdout=1
    89 000001C4 0F05                        syscall ; вызов системной функции
    90 000001C6 59                          pop rcx 
    91 000001C7 49FFC0                      inc r8 ; инкрементирование счетчика элементов
    92 000001CA E2CD                        loop begin_loop_output
    93                                      
    94 000001CC 48BE-                       mov rsi, InBuf ; адрес вводимой строки
    94 000001CE [0000000000000000] 
    95 000001D6 BA0A000000                  mov rdx, lenIn ; длина строки
    96 000001DB B800000000                  mov rax, 0 ; системная функция 0 (read)
    97 000001E0 BF00000000                  mov rdi, 0 ; дескриптор файла stdin=0
    98 000001E5 0F05                        syscall ; вызов системной функции
    99 000001E7 B83C000000                  mov rax, 60 ; системная функция 60 (exit)
   100 000001EC 4831FF                      xor rdi, rdi ; return code 0
   101 000001EF 0F05                        syscall ; вызов системной функции
